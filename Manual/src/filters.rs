// NOTE: We use this version of the RIDGE filter to differenciate it from SHARPEN
pub const RIDGE_3X3: &[&[f32]] = &[&[-1.0, -1.0, -1.0], &[-1.0, 8.0, -1.0], &[-1.0, -1.0, -1.0]];

pub const RIDGE_6X6: &[&[f32]] = &[
    &[0.0, 0.0, -1.0, -1.0, 0.0, 0.0],
    &[0.0, -1.0, -2.0, -2.0, -1.0, 0.0],
    &[-1.0, -2.0, 7.0, 7.0, -2.0, -1.0],
    &[-1.0, -2.0, 7.0, 7.0, -2.0, -1.0],
    &[0.0, -1.0, -2.0, -2.0, -1.0, 0.0],
    &[0.0, 0.0, -1.0, -1.0, 0.0, 0.0],
];

pub const RIDGE_12X12: &[&[f32]] = &[
    // Row 0..1 => outermost border of zeros
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    // Row 2..3 => ring of -1 around the next ring
    &[
        0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, 0.0, 0.0,
    ],
    // Row 4..7 => includes the central 4Ã—4 region
    &[
        0.0, 0.0, -1.0, -2.0, 7.0, 7.0, 7.0, 7.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 7.0, 7.0, 7.0, 7.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 7.0, 7.0, 7.0, 7.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 7.0, 7.0, 7.0, 7.0, -2.0, -1.0, 0.0, 0.0,
    ],
    // Row 8..9 => mirrored ring
    &[
        0.0, 0.0, -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0,
    ],
    // Row 10..11 => outermost border of zeros
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
];

pub const SHARPEN_3X3: &[&[f32]] = &[&[0.0, -1.0, 0.0], &[-1.0, 5.0, -1.0], &[0.0, -1.0, 0.0]];

pub const SHARPEN_6X6: &[&[f32]] = &[
    &[0.0, 0.0, -1.0, -1.0, 0.0, 0.0],
    &[0.0, -1.0, -2.0, -2.0, -1.0, 0.0],
    &[-1.0, -2.0, 9.0, 9.0, -2.0, -1.0],
    &[-1.0, -2.0, 9.0, 9.0, -2.0, -1.0],
    &[0.0, -1.0, -2.0, -2.0, -1.0, 0.0],
    &[0.0, 0.0, -1.0, -1.0, 0.0, 0.0],
];

pub const SHARPEN_12X12: &[&[f32]] = &[
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    &[
        0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 9.0, 9.0, 9.0, 9.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 9.0, 9.0, 9.0, 9.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 9.0, 9.0, 9.0, 9.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, 9.0, 9.0, 9.0, 9.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, 0.0, 0.0,
    ],
    &[
        0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0,
    ],
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    &[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
];

pub const BOX_BLUR_3X3: &[&[f32]] = &[
    &[1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0],
    &[1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0],
    &[1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0],
];

pub const BOX_BLUR_6X6: &[&[f32]] = &[
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
    &[
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
        1.0 / 32.0,
    ],
];

pub const BOX_BLUR_12X12: &[&[f32]] = &[
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
    &[
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
        1.0 / 144.0,
    ],
];

pub const GAUSSIAN_3X3: &[&[f32]] = &[
    &[0.0751136, 0.1238414, 0.0751136],
    &[0.1238414, 0.2041799, 0.1238414],
    &[0.0751136, 0.1238414, 0.0751136],
];

pub const GAUSSIAN_6X6: &[&[f32]] = &[
    &[0.00031, 0.00228, 0.00619, 0.00619, 0.00228, 0.00031],
    &[0.00228, 0.01682, 0.04579, 0.04579, 0.01682, 0.00228],
    &[0.00619, 0.04579, 0.12430, 0.12430, 0.04579, 0.00619],
    &[0.00619, 0.04579, 0.12430, 0.12430, 0.04579, 0.00619],
    &[0.00228, 0.01682, 0.04579, 0.04579, 0.01682, 0.00228],
    &[0.00031, 0.00228, 0.00619, 0.00619, 0.00228, 0.00031],
];

/// Generates a size x size 2D Gaussian kernel with the given sigma.
/// The returned Vec<Vec<f32>> is normalized so that its total sum is 1.0.
fn gaussian_kernel(size: usize, sigma: f32) -> Vec<Vec<f32>> {
    let mut kernel = vec![vec![0.0; size]; size];
    let mut sum = 0.0;

    // Center coordinate (so we can measure distance from the center)
    let half = (size - 1) as f32 / 2.0;

    for i in 0..size {
        for j in 0..size {
            let x = i as f32 - half;
            let y = j as f32 - half;

            // 2D Gaussian (omitting the constant factor); we'll normalize manually
            let weight = (-(x * x + y * y) / (2.0 * sigma * sigma)).exp();
            kernel[i][j] = weight;
            sum += weight;
        }
    }

    // Normalize so that the entire kernel sums to 1.0
    for i in 0..size {
        for j in 0..size {
            kernel[i][j] /= sum;
        }
    }

    kernel
}
